---
title: "quarto :: Cheatsheet"
description: "QMD Edition"
image-alt: ""
engine: knitr
execute:
  eval: true
  output: false
  warning: false
---

::: column-margin
```{=html}
<img src="images/logo-quarto.png" height="138" alt="Hex logo for Quarto - a white circle segmented into quarters next to the text Quarto on a blue background." />
<br><br>
```
```{=html}
<p><i class="bi bi-file-pdf"></i>PDF Coming Soon...</p>
<br><br>
```
:::

## What is Quarto?

Quarto is an **open-source scientific and technical publishing system**:

-   Create dynamic content with Python, R, Julia, and Observable.

-   Publish reproducible, production quality articles, presentations, websites, blogs, and books in HTML, PDF, MS Word, ePub, and more.

-   Share knowledge and insights organization-wide by publishing to Posit Connect, Confluence, or other publishing systems.

Get Quarto from: <https://quarto.org/docs/download/>

Or, use version bundled with RStudio.

## Workflow

### Author

(Screenshot of .qmd in source editor)

Highlight:

-   `.qmd`: plain text, use any text editor
-   YAML Header
    -   Set Output Format(s) and Options
-   Markdown
    -   Write Text
-   Code cells
    -   Embed Code

#### Authoring Tools

Rich authoring experience in:

-   RStudio
-   VS Code with the Quarto extension (quarto-vscode)

*Is this useful? Maybe as a Useful Shortcuts table, and use general language for command.*

::: {layout-ncol="2"}
+----------------------------------------+---------------+
| RStudio                                | Shortcut      |
+========================================+===============+
| Create a new Quarto document           |               |
+----------------------------------------+---------------+
| Render Current Document                |               |
+----------------------------------------+---------------+
| Insert a new code chunk                |               |
+----------------------------------------+---------------+
| Run current code chunk                 |               |
+----------------------------------------+---------------+
| Run all chunks above the current chunk |               |
+----------------------------------------+---------------+
| Restart R Session and Run All Chunks   |               |
+----------------------------------------+---------------+

+-----------------------------+---------------+
| VS Code                     | Shortcut      |
+=============================+===============+
| Quarto: New Document        |               |
+-----------------------------+---------------+
| Quarto: Render              |               |
+-----------------------------+---------------+
| Quarto: Insert Code Cell    |               |
+-----------------------------+---------------+
| Quarto: Run Current Cell    |               |
+-----------------------------+---------------+
| Quarto: Run All Cells Above |               |
+-----------------------------+---------------+
| Quarto: Run All Cells       |               |
+-----------------------------+---------------+
:::

#### Visual Editor

(Screenshot of Visual Editor toolbar, with callouts for features below)

##### Features within the Visual Editor

-   Insert citations
-   Insert and edit tables
-   Style options
-   Add/edit attributes
-   Insert Anything

### Render

**Save,** then **Render** to preview the document output. The resulting HTML/PDF/MS Word/etc. document will be created and saved in the same directory as the .qmd file.

**Render**:

-   Render button (Screenshot RStudio and VS Code)

-   On command line:

    ``` {.bash filename="Terminal"}
    quarto preview document.qmd
    ```

When you render a document, Quarto:

1.  Runs the code and embeds results and text into an .md file with Knitr or Jupyter.
2.  Converts the .md file into the output format with Pandoc.

#### Execution Engine

*(This is getting into the weeds, but I do think it is important for new users to understand that its either Knitr or Jupyter that is doing the code evaluation. It's relevant for other sections of cheatsheet: code cell options, inline code, tables, parameters. I'll attempt to minimize/streamline.)*

Code is executed either with:

-   Knitr: If there are `{r}` blocks. If there are also `{python}` blocks, they will be executed using the reticulate package.

-   Jupyter: Any other code blocks (e.g. `{python}`, `{julia}`, `{bash}`). Kernel determined by the first executable code block. Other language blocks not evaluated.

Override engine selection with `engine`:

``` yaml
engine: jupyter
```

Set engine options with `knitr` or `jupyter`:

::: {layout-ncol="2"}
``` yaml
knitr:
  opts_knit:
    verbose: true
```

``` yaml
jupyter: julia-1.9
```
:::

### Preview

(Screenshot of output here)

### Publish

``` {.bash filename="Terminal"}
quarto publish {venue} document.qmd
```

`{venue}`: quarto-pub, connect, gh-pages, netlify, confluence, (*coming in Quarto 1.4*) posit-cloud

Publish button in RStudio (Screenshot here)

(Need some text to distinguish these three venues)

-   **Quarto Pubs**

-   **Posit Cloud**

-   **Posit Connect** to share Quarto documents securely, schedule automatic updates, and interact with parameters in real time. <https://posit.co/products/enterprise/connect/>.

## Embed Code

### Code Cells

Code cells start with ```` ```{r} ````, or ```` ```{python} ````, and end with ```` ``` ````.

Or use **Insert Code Chunk/Cell**.

::: {layout-ncol="2"}
```{{r}}
#| label: chunk-label
```

```{{python}}
#| label: chunk-label
```
:::

Can also use `{ojs}` or `{julia}`.

Add YAML code chunk options using `#|` comments inside the chunk.

### Execution Options

Set at the chunk level:

::: {layout-ncol="2"}
```{{r}}
#| echo: false
```

```{{python}}
#| echo: false
```
:::

Or globally in the YAML header with the `execute` option:

``` yaml
---
execute:
  echo: false
---
```

+-----------+-----------+----------------------------------------------------------+
| Option    | Default   | Effects                                                  |
+===========+===========+==========================================================+
| `echo`    | `true`    | `false`: hide code in output\                            |
|           |           | `fenced`: show code cell syntax along with code          |
+-----------+-----------+----------------------------------------------------------+
| `eval`    | `true`    | `false`: don't run code                                  |
+-----------+-----------+----------------------------------------------------------+
| `include` | `true`    | `false`: don't include code or results in output         |
+-----------+-----------+----------------------------------------------------------+
| `output`  | `true`    | `false`: don't include results\                          |
|           |           | `asis`: treat results as raw markdown                    |
+-----------+-----------+----------------------------------------------------------+
| `warning` | `true`    | `false`: don't include warnings in output                |
+-----------+-----------+----------------------------------------------------------+
| `error`   | `false`   | `true`: include error in output and continue with render |
+-----------+-----------+----------------------------------------------------------+

### Other Cell Options

Other options to control [figures](#figures), [tables](#tables), [layout](#layout).

Available options depend on engine:

-   Knitr: <https://quarto.org/docs/reference/cells/cells-knitr.html>
-   Jupyter: <https://quarto.org/docs/reference/cells/cells-jupyter.html>

### Inline Code

Use computed values directly in text sections. Code is evaluated at render and results appear as text.

::: {layout-ncol="3"}
<div>

#### Knitr

Two times two is `` `r knitr::inline_expr("2*2")` ``.

</div>

<div>

#### Jupyter

[Coming in Quarto v1.4]{.small .muted}

Two times two is `` `{python} 2*2` ``.

</div>

<div>

#### Output

Two times two is `r 2*2`.

</div>
:::

<!-- START CONTENT ELEMENTS -->

## Write With Markdown

RStudio: **Help** \> **Markdown Quick Reference**

<https://quarto.org/docs/authoring/markdown-basics.html>

Or use **Visual Editor**

## Figures {#figures}

### Markdown

``` markdown
![CAPTION](image.png){#fig-LABEL fig-alt="ALT TEXT"}
```

### Computation

```{{r}}
#| label: fig-LABEL
#| fig-cap: CAPTION
#| fig-alt: ALT TEXT
{{ plot code here }}
```

## Tables {#tables}

### Markdown

``` markdown
|object | radius|
|:------|------:|
|Sun    | 696000|
|Earth  |   6371|
```

### Computation

Output a markdown table or an HTML table (regardless of your format) from your code.

::: {layout-ncol="2"}
<div>

#### Knitr

Use `knitr::kable()` to produce markdown:

```{{r}}
#| label: tbl-LABEL
#| tbl-cap: CAPTION

knitr::kable(head(cars))
```

Also see the R packages: gt, flextable, kableExtra.

</div>

<div>

#### Jupyter

Combine `Markdown()` with a function that outputs markdown:

```{{python}}
#| label: tbl-LABEL
#| tbl-cap: CAPTION
from tabulate import tabulate
table = [["Sun","696,000",1.989e30],
         ["Earth","6,371",5.972e24]]
Markdown(tabulate(table, tablefmt='html'))
```

</div>
:::

<!-- Could include raw HTML syntax here too... -->

## Cross References

1.  Add labels:

    -   **Code cell:**

        ``` r
        #| label: prefix-LABEL
        ```

    -   **Markdown:** add attribute `#prefix-LABEL`

2.  Add references: `@prefix-LABEL`, e.g.

    ``` markdown
    You can see in @fig-scatterplot, that...
    ```

| `prefix` | Renders    |
|----------|------------|
| `fig-`   | Figure 1   |
| `tbl-`   | Table 1    |
| `eq-`    | Equation 1 |
| `sec-`   | Section 1  |

## Citations

1.  Add bibliography file to the YAML header:

    ``` yaml
    ---
    title: "My Document"
    bibliography: references.bib
    ---
    ```

2.  Add citations: `[@citation]`, or `@citation`

**Insert Citations** dialog in the Visual Editor:

-   Build your bibliography file from your Zotero library, DOI, Crossref, DataCite, or PubMed

-   Generate citation markdown syntax

## Callouts

``` markdown
::: {.callout-tip}
## Title

Text
:::
```

Instead of `tip` use one of: `note`, `caution`, `warning`, or `important`:

::: callout-tip
## tip
:::

::: callout-note
## note
:::

::: callout-caution
## caution
:::

::: callout-warning
## warning
:::

::: callout-important
## important
:::

## Shortcodes

Include the contents of `_file.qmd` in document:
``` {.markdown shortcodes=false}                                                             
{{< include _file.qmd >}} 
```                                   

Embed the code cell labelled `fig-LABEL` from the file `notebook.ipynb` in the document:
``` {.markdown shortcodes=false}                         
{{< embed notebook.ipynb#fig-LABEL >}}
```                                                                                                                                              

Embed a video in the document. Can also be a link to YouTube, or Vimeo:
``` {.markdown shortcodes=false}                                        
{{< video local-video.mp4 >}}
```                                                                                                                                              

Insert a format appropriate pagebreak:
``` {.markdown shortcodes=false}                                                                           
{{< pagebreak >}}
```                                                                                                                                              

Include the value of the option `title` set in the document metadata. Also see `var` and `env` shortcodes:
``` {.markdown shortcodes=false}       
{{< meta title >}}
```                                                                                                                                              


## Layout {#layout}

Use the `layout-ncol` and `layout-nrow` attributes to arrange content in a grid:

``` markdown
:::: {layout-ncol=2}
::: {}
Left 
:::
::: {}
Right
:::
::::
```

Use `layout` for more complicated arrangements:

``` markdown
:::: {layout="[[1, 1], [1]]"}
::: {}
Top Left 
:::
::: {}
Top Right
:::
::: {}
Bottom
:::
::::
```

Use `layout-ncol`, `layout-nrow`, `layout` as code chunk options.

<!-- END CONTENT ELEMENTS -->

## Set Output Formats and Their Options in YAML

Common values for `format`: html, pdf[^1], docx, odt, rtf, gfm, pptx, revealjs, beamer[^2]

[^1]: PDFs and Beamer slides require LaTeX, use:

    ``` {.bash filename="Terminal"}
    quarto install tinytex
    ```

[^2]: PDFs and Beamer slides require LaTeX, use:

    ``` {.bash filename="Terminal"}
    quarto install tinytex
    ```

::: {layout-ncol="3"}
<div>

### Single output, default options:

``` yaml
---
title: "My Document"
author: "Author Name"
format: html
---
```

</div>

<div>

### Single output, set options:

``` yaml
---
title: "My Document"
author: "Author Name"
format: 
  html: 
    code-fold: true
    toc: true
---
```

-   Indent format two spaces
-   Indent options four spaces

</div>

<div>

### Multiple outputs:

Use `quarto render` on command line or **Render All**

``` yaml
---
title: "My Document"
author: "Author Name"
toc: true
format: 
  html: 
    code-fold: true
  pdf: default
---
```

-   Top-level options apply to all formats

</div>
:::

### Output Options Table

```{r}
#| echo: false
#| output: true
#| tbl-cap: Important Options. The first column is the option name, the second column is the description and possible values, and then remaining columns show what file types each option can be applied to, and whether it can also be used as a code cell option.
library(readr)
library(dplyr)
library(gt)
format_options <- read_csv("data/format-options.csv")
format_options |> 
  group_by(Category) |> 
  gt() |>
  sub_missing(missing_text = "")
```

Visit <https://quarto.org/docs/reference/> to see all of a format's options

## Quarto Projects

A collection of Quarto documents and a configuration file, `_quarto.yml`

Websites, blogs, books, and more...

Get started from the command line:

``` {.bash filename="Terminal"}
quarto create project {type}
```

Or RStudio: New Project

`{type}`: website, blog, book, confluence

## Quarto Commands

Quarto is a command line tool. Run commands in the Terminal. Add `--help` to get more information.

+----------------------------------------------+-------------------------------------+
| The **Render** button is like:               | ``` bash                            |
|                                              | quarto preview document.qmd         |
|                                              | ```                                 |
+----------------------------------------------+-------------------------------------+
| Render all formats:                          | ``` bash                            |
|                                              | quarto render document.qmd          |
|                                              | ```                                 |
+----------------------------------------------+-------------------------------------+
| Render to a specific format:                 | ``` bash                            |
|                                              | quarto render document.qmd --to pdf |
|                                              | ```                                 |
+----------------------------------------------+-------------------------------------+
| Render a project:                            | ``` bash                            |
|                                              | quarto render                       |
|                                              | ```                                 |
+----------------------------------------------+-------------------------------------+
| Install tinytex, recommended for PDF output: | ``` bash                            |
|                                              | quarto install tinytex              |
|                                              | ```                                 |
+----------------------------------------------+-------------------------------------+
| Publish a document:                          | ``` bash                            |
|                                              | quarto publish {venue} document.qmd |
|                                              | ```                                 |
+----------------------------------------------+-------------------------------------+
| Publish a project:                           | ``` bash                            |
|                                              | quarto publish {venue}              |
|                                              | ```                                 |
+----------------------------------------------+-------------------------------------+
| Diagnostics on Quarto and rendering engines: | ``` bash                            |
|                                              | quarto check                        |
|                                              | ```                                 |
+----------------------------------------------+-------------------------------------+

## Parameters

Parameterize your documents to reuse with new inputs (e.g. data, values, etc.).

::: {layout-ncol="2"}
<div>

#### knitr

1.  **Add parameters** in the header as sub-values of `params`:

    ``` yaml
    ---
    params:
      state: "hawaii"
    ---
    ```

2.  **Call parameters** in code using `params$name`:

    ```{{r}}
    params$state
    ```

</div>

<div>

#### jupyter

1.  **Add parameters** to a code cell tagged `parameters`:

    ```` markdown
    ```{{python}}
    #| tags: [parameters]

    state = "hawaii"
    ```
    ````

2.  **Call parameters** in code:

    ```{{python}}
    state
    ```

</div>
:::

**Set parameters at render** with the `-P` option to `quarto render`

``` {.bash filename="Terminal"}
quarto render report.qmd -P state:"colorado"
```

## Interactivity?

## Extensions?

Shortcodes, Filters, Journal Article Templates

``` bash
quarto add
```

``` bash
quarto use
```

------------------------------------------------------------------------

CC BY SA Posit Software, PBC • [info\@posit.co](mailto:info@posit.co) • [posit.co](https://posit.co)

Learn more at [quarto.org](https://quarto.org).

Quarto 1.3

Updated: `r format(Sys.Date(), "%Y-%m")`.

------------------------------------------------------------------------
